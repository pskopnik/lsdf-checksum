package workqueue

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *WorkPack) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			return
		}
		switch msgp.UnsafeString(field) {
		case "FileSystemName":
			z.FileSystemName, err = dc.ReadString()
			if err != nil {
				return
			}
		case "SnapshotName":
			z.SnapshotName, err = dc.ReadString()
			if err != nil {
				return
			}
		case "Files":
			var zb0002 uint32
			zb0002, err = dc.ReadArrayHeader()
			if err != nil {
				return
			}
			if cap(z.Files) >= int(zb0002) {
				z.Files = (z.Files)[:zb0002]
			} else {
				z.Files = make([]WorkPackFile, zb0002)
			}
			for za0001 := range z.Files {
				var zb0003 uint32
				zb0003, err = dc.ReadMapHeader()
				if err != nil {
					return
				}
				for zb0003 > 0 {
					zb0003--
					field, err = dc.ReadMapKeyPtr()
					if err != nil {
						return
					}
					switch msgp.UnsafeString(field) {
					case "Id":
						z.Files[za0001].Id, err = dc.ReadUint64()
						if err != nil {
							return
						}
					case "Path":
						z.Files[za0001].Path, err = dc.ReadString()
						if err != nil {
							return
						}
					default:
						err = dc.Skip()
						if err != nil {
							return
						}
					}
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *WorkPack) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 3
	// write "FileSystemName"
	err = en.Append(0x83, 0xae, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4e, 0x61, 0x6d, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.FileSystemName)
	if err != nil {
		return
	}
	// write "SnapshotName"
	err = en.Append(0xac, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x4e, 0x61, 0x6d, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.SnapshotName)
	if err != nil {
		return
	}
	// write "Files"
	err = en.Append(0xa5, 0x46, 0x69, 0x6c, 0x65, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Files)))
	if err != nil {
		return
	}
	for za0001 := range z.Files {
		// map header, size 2
		// write "Id"
		err = en.Append(0x82, 0xa2, 0x49, 0x64)
		if err != nil {
			return
		}
		err = en.WriteUint64(z.Files[za0001].Id)
		if err != nil {
			return
		}
		// write "Path"
		err = en.Append(0xa4, 0x50, 0x61, 0x74, 0x68)
		if err != nil {
			return
		}
		err = en.WriteString(z.Files[za0001].Path)
		if err != nil {
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *WorkPack) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 3
	// string "FileSystemName"
	o = append(o, 0x83, 0xae, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4e, 0x61, 0x6d, 0x65)
	o = msgp.AppendString(o, z.FileSystemName)
	// string "SnapshotName"
	o = append(o, 0xac, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x4e, 0x61, 0x6d, 0x65)
	o = msgp.AppendString(o, z.SnapshotName)
	// string "Files"
	o = append(o, 0xa5, 0x46, 0x69, 0x6c, 0x65, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Files)))
	for za0001 := range z.Files {
		// map header, size 2
		// string "Id"
		o = append(o, 0x82, 0xa2, 0x49, 0x64)
		o = msgp.AppendUint64(o, z.Files[za0001].Id)
		// string "Path"
		o = append(o, 0xa4, 0x50, 0x61, 0x74, 0x68)
		o = msgp.AppendString(o, z.Files[za0001].Path)
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *WorkPack) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			return
		}
		switch msgp.UnsafeString(field) {
		case "FileSystemName":
			z.FileSystemName, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				return
			}
		case "SnapshotName":
			z.SnapshotName, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				return
			}
		case "Files":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				return
			}
			if cap(z.Files) >= int(zb0002) {
				z.Files = (z.Files)[:zb0002]
			} else {
				z.Files = make([]WorkPackFile, zb0002)
			}
			for za0001 := range z.Files {
				var zb0003 uint32
				zb0003, bts, err = msgp.ReadMapHeaderBytes(bts)
				if err != nil {
					return
				}
				for zb0003 > 0 {
					zb0003--
					field, bts, err = msgp.ReadMapKeyZC(bts)
					if err != nil {
						return
					}
					switch msgp.UnsafeString(field) {
					case "Id":
						z.Files[za0001].Id, bts, err = msgp.ReadUint64Bytes(bts)
						if err != nil {
							return
						}
					case "Path":
						z.Files[za0001].Path, bts, err = msgp.ReadStringBytes(bts)
						if err != nil {
							return
						}
					default:
						bts, err = msgp.Skip(bts)
						if err != nil {
							return
						}
					}
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *WorkPack) Msgsize() (s int) {
	s = 1 + 15 + msgp.StringPrefixSize + len(z.FileSystemName) + 13 + msgp.StringPrefixSize + len(z.SnapshotName) + 6 + msgp.ArrayHeaderSize
	for za0001 := range z.Files {
		s += 1 + 3 + msgp.Uint64Size + 5 + msgp.StringPrefixSize + len(z.Files[za0001].Path)
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *WorkPackFile) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			return
		}
		switch msgp.UnsafeString(field) {
		case "Id":
			z.Id, err = dc.ReadUint64()
			if err != nil {
				return
			}
		case "Path":
			z.Path, err = dc.ReadString()
			if err != nil {
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z WorkPackFile) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "Id"
	err = en.Append(0x82, 0xa2, 0x49, 0x64)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.Id)
	if err != nil {
		return
	}
	// write "Path"
	err = en.Append(0xa4, 0x50, 0x61, 0x74, 0x68)
	if err != nil {
		return
	}
	err = en.WriteString(z.Path)
	if err != nil {
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z WorkPackFile) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "Id"
	o = append(o, 0x82, 0xa2, 0x49, 0x64)
	o = msgp.AppendUint64(o, z.Id)
	// string "Path"
	o = append(o, 0xa4, 0x50, 0x61, 0x74, 0x68)
	o = msgp.AppendString(o, z.Path)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *WorkPackFile) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			return
		}
		switch msgp.UnsafeString(field) {
		case "Id":
			z.Id, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				return
			}
		case "Path":
			z.Path, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z WorkPackFile) Msgsize() (s int) {
	s = 1 + 3 + msgp.Uint64Size + 5 + msgp.StringPrefixSize + len(z.Path)
	return
}

// DecodeMsg implements msgp.Decodable
func (z *WriteBackPack) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			return
		}
		switch msgp.UnsafeString(field) {
		case "Files":
			var zb0002 uint32
			zb0002, err = dc.ReadArrayHeader()
			if err != nil {
				return
			}
			if cap(z.Files) >= int(zb0002) {
				z.Files = (z.Files)[:zb0002]
			} else {
				z.Files = make([]WriteBackPackFile, zb0002)
			}
			for za0001 := range z.Files {
				var zb0003 uint32
				zb0003, err = dc.ReadMapHeader()
				if err != nil {
					return
				}
				for zb0003 > 0 {
					zb0003--
					field, err = dc.ReadMapKeyPtr()
					if err != nil {
						return
					}
					switch msgp.UnsafeString(field) {
					case "Id":
						z.Files[za0001].Id, err = dc.ReadUint64()
						if err != nil {
							return
						}
					case "Checksum":
						z.Files[za0001].Checksum, err = dc.ReadBytes(z.Files[za0001].Checksum)
						if err != nil {
							return
						}
					default:
						err = dc.Skip()
						if err != nil {
							return
						}
					}
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *WriteBackPack) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 1
	// write "Files"
	err = en.Append(0x81, 0xa5, 0x46, 0x69, 0x6c, 0x65, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Files)))
	if err != nil {
		return
	}
	for za0001 := range z.Files {
		// map header, size 2
		// write "Id"
		err = en.Append(0x82, 0xa2, 0x49, 0x64)
		if err != nil {
			return
		}
		err = en.WriteUint64(z.Files[za0001].Id)
		if err != nil {
			return
		}
		// write "Checksum"
		err = en.Append(0xa8, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d)
		if err != nil {
			return
		}
		err = en.WriteBytes(z.Files[za0001].Checksum)
		if err != nil {
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *WriteBackPack) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 1
	// string "Files"
	o = append(o, 0x81, 0xa5, 0x46, 0x69, 0x6c, 0x65, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Files)))
	for za0001 := range z.Files {
		// map header, size 2
		// string "Id"
		o = append(o, 0x82, 0xa2, 0x49, 0x64)
		o = msgp.AppendUint64(o, z.Files[za0001].Id)
		// string "Checksum"
		o = append(o, 0xa8, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d)
		o = msgp.AppendBytes(o, z.Files[za0001].Checksum)
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *WriteBackPack) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			return
		}
		switch msgp.UnsafeString(field) {
		case "Files":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				return
			}
			if cap(z.Files) >= int(zb0002) {
				z.Files = (z.Files)[:zb0002]
			} else {
				z.Files = make([]WriteBackPackFile, zb0002)
			}
			for za0001 := range z.Files {
				var zb0003 uint32
				zb0003, bts, err = msgp.ReadMapHeaderBytes(bts)
				if err != nil {
					return
				}
				for zb0003 > 0 {
					zb0003--
					field, bts, err = msgp.ReadMapKeyZC(bts)
					if err != nil {
						return
					}
					switch msgp.UnsafeString(field) {
					case "Id":
						z.Files[za0001].Id, bts, err = msgp.ReadUint64Bytes(bts)
						if err != nil {
							return
						}
					case "Checksum":
						z.Files[za0001].Checksum, bts, err = msgp.ReadBytesBytes(bts, z.Files[za0001].Checksum)
						if err != nil {
							return
						}
					default:
						bts, err = msgp.Skip(bts)
						if err != nil {
							return
						}
					}
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *WriteBackPack) Msgsize() (s int) {
	s = 1 + 6 + msgp.ArrayHeaderSize
	for za0001 := range z.Files {
		s += 1 + 3 + msgp.Uint64Size + 9 + msgp.BytesPrefixSize + len(z.Files[za0001].Checksum)
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *WriteBackPackFile) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			return
		}
		switch msgp.UnsafeString(field) {
		case "Id":
			z.Id, err = dc.ReadUint64()
			if err != nil {
				return
			}
		case "Checksum":
			z.Checksum, err = dc.ReadBytes(z.Checksum)
			if err != nil {
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *WriteBackPackFile) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "Id"
	err = en.Append(0x82, 0xa2, 0x49, 0x64)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.Id)
	if err != nil {
		return
	}
	// write "Checksum"
	err = en.Append(0xa8, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d)
	if err != nil {
		return
	}
	err = en.WriteBytes(z.Checksum)
	if err != nil {
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *WriteBackPackFile) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "Id"
	o = append(o, 0x82, 0xa2, 0x49, 0x64)
	o = msgp.AppendUint64(o, z.Id)
	// string "Checksum"
	o = append(o, 0xa8, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d)
	o = msgp.AppendBytes(o, z.Checksum)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *WriteBackPackFile) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			return
		}
		switch msgp.UnsafeString(field) {
		case "Id":
			z.Id, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				return
			}
		case "Checksum":
			z.Checksum, bts, err = msgp.ReadBytesBytes(bts, z.Checksum)
			if err != nil {
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *WriteBackPackFile) Msgsize() (s int) {
	s = 1 + 3 + msgp.Uint64Size + 9 + msgp.BytesPrefixSize + len(z.Checksum)
	return
}
